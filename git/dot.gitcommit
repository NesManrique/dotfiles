# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Follow this rules when writing a commit message:
#
#   Subject is around 50 characters or less
#
#   More detailed explanatory text, if necessary. Wrap it to about 72
#   characters or so. Always capitalize the subject line and never end
#   it with a period. The blank line separating the summary from the
#   body is critical (unless you omit the body entirely); tools like
#   `log`, `shortlog` and `rebase` can get confused if you run the two
#   together.
#
#   Use the imperative mood in the subject line. Complete this sentence
#   to write a proper subject:
#
#   If applied, this commit will <your subject line here>
#
#   GOOD subjects
#
#   If applied, this commit will:
#      - Fix bug when login in twice a day
#      - Refactor subsystem X for readability
#      - Update getting started documentation
#      - Remove deprecated methods
#      - Release version 1.0.0
#
#   BAD subjects
#
#   If applied, this commit will:
#      - Fixed bug with Y
#      - Changing behavior of X
#      - More fixes for broken stuff
#      - Sweet new API methods
#
#   In the body explain the problem that this commit is solving. Focus
#   on why you are making this change as opposed to how (the code
#   explains that). Are there side effects or other unintuitive
#   consequences of this change? Here's the place to explain them.
#
#   Further paragraphs come after blank lines.
#
#    - Bullet points are okay, too
#
#    - Typically a hyphen or asterisk is used for the bullet, preceded
#      by a single space, with blank lines in between, but conventions
#      vary here
#
#   If you use an issue tracker, put references to them at the bottom,
#   like this:
#
#   Resolves: #123
#   See also: #456, #789
